
# Runs tests and verifies that the package can be built.
name: debian package publish

# Controls when the action will run.
on:
  workflow_call:
    inputs:
      branch:
        description: 'Target branch'
        default: ${{ github.event.release.target_commitish }}
        type: string
      version:
        description: 'Released version'
        default: ${{ github.event.release.tag_name }}
        type: string
      notes:
        description: 'Release notes'
        default: ${{ github.event.release.body }}
        type: string
      message:
        description: 'Commit message'
        default: ${{ github.event.head_commit.message }}
        type: string
    secrets:
      GPG_KEY:
        required: true
      GPG_KEY_ID:
        required: true
      GIT_COMMITTER_EMAIL:
        required: true
      SSH_ID_RSA:
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: ${{matrix.operating-system}}
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ubuntu-latest]
        # operating-system: [ubuntu-22.04, ubuntu-20.04]
        # php-versions: ['5.3', '5.4', '5.5', '5.6', '7.0', '7.1', '7.2', '7.3', '7.4', '8.0', '8.1', '8.2', '8.3', '8.3']
        # php-versions: ['8.1', '8.2', '8.3']
    name: Build and push package with ${{ matrix.operating-system }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug
        run: |
          echo $GIT_COMMITTER_EMAIL
          echo $GIT_COMMITTER_NAME
          echo $GPG_KEY
          echo $GPG_KEY_ID
          echo "Branch: ${{ inputs.branch }}"
          echo "Version: ${{ inputs.version }}"
          echo "Notes: ${{ inputs.notes }}"
          echo "Message: ${{ inputs.message }}"
        env:
          GIT_COMMITTER_EMAIL: ${{ secrets.GIT_COMMITTER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ github.repository_owner }}
          GPG_KEY: ${{ secrets.GPG_KEY }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: SSH configuration
        shell: bash
        run: |
          mkdir -p ~/.ssh
          [[ ! -f "~/.ssh/id_rsa" ]] && echo "$SSH_ID_RSA" > ~/.ssh/id_rsa || (echo "$SSH_ID_RSA" > ~/.ssh/id_rsa_work && ssh-add ~/.ssh/id_rsa_work)
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/*
        env:
          SSH_ID_RSA: ${{ secrets.SSH_ID_RSA }}

      - name: Git configuration
        run: |
          echo "$GPG_KEY====" | tr -d '\n' | fold -w 4 | sed '$ d' | tr -d '\n' | fold -w 76 | base64 -di | gpg --batch --import || true
          gpg --list-secret-keys --keyid-format=long
          git config --global user.email "$GIT_COMMITTER_EMAIL"
          git config --global user.name "$GIT_COMMITTER_NAME"
          git config --global commit.gpgsign true
          git config --global user.signingkey $GPG_KEY_ID
          git config --global pull.rebase true
        env:
          GIT_COMMITTER_EMAIL: ${{ secrets.GIT_COMMITTER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ github.repository_owner }}
          GPG_KEY: ${{ secrets.GPG_KEY }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - uses: actions/checkout@v4
        with:
          repository: diepxuan/ppa
          path: ppa

      - name: Copy source to ppa
        run: |
          rm -rf ppa/src/$repository
          mkdir -p ppa/src/$repository/
          cp -r src/. ppa/src/$repository/
        env:
          repository: ${{ github.repository }}

      - name: Push source to ppa
        working-directory: ppa
        env:
          GIT_COMMITTER_MESSAGE: ${{ inputs.message }}
        run: |
          git add .
          if [ "$(git status --porcelain=v1 2>/dev/null | wc -l)" != "0" ]; then
            git add .
            git commit -m "$GIT_COMMITTER_MESSAGE" &&
              git push ||
              git stash &&
              git pull --rebase &&
              git stash apply &&
              git push || true
          fi
