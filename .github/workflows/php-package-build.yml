
# Runs tests and verifies that the package can be built.
name: Build

# Controls when the action will run.
on:
  workflow_call:
    inputs:
      branch:
        description: 'Target branch'
        default: ${{ github.event.release.target_commitish }}
        type: string
      version:
        description: 'Released version'
        default: ${{ github.event.release.tag_name }}
        type: string
      notes:
        description: 'Release notes'
        default: ${{ github.event.release.body }}
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: ${{matrix.operating-system}}
    strategy:
      fail-fast: false
      matrix:
        # operating-system: [ubuntu-latest]
        operating-system: [ubuntu-22.04, ubuntu-20.04]
        # php-versions: ['5.3', '5.4', '5.5', '5.6', '7.0', '7.1', '7.2', '7.3', '7.4', '8.0', '8.1', '8.2', '8.3', '8.3']
        php-versions: ['8.1', '8.2', '8.3']
    name: Build and push package using PHP ${{ matrix.php-versions }} with ${{ matrix.operating-system }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Retrieve the secret, decode and import GPG key
        run: |
          echo "$GPG_KEY====" | tr -d '\n' | fold -w 4 | sed '$ d' | tr -d '\n' | fold -w 76 | base64 -di | gpg --batch --import || true
          gpg --list-secret-keys --keyid-format=long
        env:
          GPG_KEY: ${{ secrets.GPG_KEY }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Configure Git gpg
        if: false
        run: |
          git config --local user.email "$GIT_COMMITTER_EMAIL"
          git config --local user.name "$GIT_COMMITTER_NAME"
          git config --local pull.rebase true
          git config commit.gpgsign true
          git config user.signingkey $GPG_KEY_ID
        env:
          GIT_COMMITTER_EMAIL: ${{ secrets.GIT_COMMITTER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ github.repository_owner }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Set up PHP with PECL extension
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: intl #optional
          ini-values: "post_max_size=256M" #optional

      - name: Install dependencies
        run: |
          mkdir -p /tmp/test
          cd /tmp/test
          composer require diepxuan/module-autologin

      - name: Setup Node.js
        if: false
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          check-latest: true

      - name: Install NPM dependencies
        if: false
        run: npm install

      - name: Compile assets for production
        if: false
        run: npm run build

      - name: Push to repository
        if: false
        run: |
          if [ "$(git status --porcelain=v1 2>/dev/null | wc -l)" != "0" ]; then
            # git add src/debian/control
            git commit -m "Update packages from ${{ matrix.operating-system }} at $(date +'%d-%m-%y')" &&
              git push ||
              git stash &&
              git pull --rebase &&
              git stash apply &&
              git push || true
          fi
      - name: log Version update
        if: false
        run: |
          git log -1
          git fetch $(git remote -v | grep "fetch" | cut -f1) 'refs/tags/*:refs/tags/*'
          echo "describe $(git describe --tags --abbrev=0 2>/dev/null)"
          echo "tag $(git tag | xargs -L 1 | tac | head -n 1)"
          version=$(git describe --tags --abbrev=0 2>/dev/null || git tag | xargs -L 1 | tac | head -n 1)
          echo "version $version"
          echo "log $(git log $version..HEAD --oneline)"
          echo "log $(git log $(git describe --tags --abbrev=0 2>/dev/null)..HEAD --oneline)"
          echo "newversion $(echo $version | tr -d . | awk -F. -v OFS=. '{$NF += 1 ; printf "%03d\n", $NF}' | sed 's/\(.\)/\1./g; s/\.$//')"

      - name: Version update
        run: |
          git fetch $(git remote -v | grep "fetch" | cut -f1) 'refs/tags/*:refs/tags/*'
          version=$(git describe --tags --abbrev=0 2>/dev/null || git tag | xargs -L 1 | tac | head -n 1)
          version=${version:-0}
          if [ $version == 0 || "$(git log $version..HEAD --oneline 2>/dev/null | wc -l)" != "0" ]; then
            version=$(echo $version | tr -d . | awk -F. -v OFS=. '{$NF += 1 ; printf "%03d\n", $NF}' | sed 's/\(.\)/\1./g; s/\.$//')
            git tag $version || true
            git push --tags
          fi
          # git tag | xargs -L 1
          git tag | xargs -L 1 | tac | awk 'NR > 3' | xargs git push $(git remote -v | grep "push" | cut -f1) --delete 2>/dev/null || true
          git fetch --prune origin +refs/tags/*:refs/tags/*
